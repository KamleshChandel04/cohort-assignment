/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const PORT = 3001;
const app = express();
const filePath = "./todos.json";

app.use(bodyParser.json());

let todos = loadTodos();

//Get Todo Route - this will give all todos.
app.get("/todos", (req, res) => {
    res.status(200).send(todos);
});

//Get Todo by :id
app.get("/todos/:id", (req, res) => {
    const id = parseInt(req.params.id);

    const todo = todos.find((item) => 
        item.id === id
    );
	
    if (todo) {
        res.status(200).json(todo);
    } else {
        res.status(404).send("Not Found");
    }
});

//Put request Todo for :id
app.put("/todos/:id", (req, res)=>{
	const id = parseInt(req.params.id);

    const todo = todos.find((item) => {
        return item.id === id;
    });

    if (todo) {
		todo.completed = true;
		saveTodos();
        return res.status(200).send("OK");
    } else {
        return res.status(404).send("Not Found");
    }
})

//Delet the specific todo
app.delete("/todos/:id", (req, res)=>{
	const id = parseInt(req.params.id);

    const todo = todos.filter((item) => {
        return item.id !== id;
    });
	if (todo) {
		todo.completed = true;
		saveTodos();
        return res.status(200).send("OK");
    } else {
        return res.status(404).send("Not Found");
    }
});

//Post Todo Route
app.post("/todos", (req, res) => {
    try {
        const { title, completed, description } = req.body;
        const id = todos.length + 1;
        const newTodo = { id, title, completed, description };

        todos.push(newTodo);
        saveTodos();

        return res.status(201).json({ id });
    } catch (error) {
        console.log(`Error in Storing data ${error}`);
        return res.status(400).json("failed");
    }
});

//for any other routes
app.use((req,res)=>{
	res.status(404).send("Not Found");
})

//To load Todos
function loadTodos() {
    try {
        const fileData = fs.readFileSync(filePath, "utf-8");
        return JSON.parse(fileData) || [];
    } catch (error) {
        console.log(`Error in fetching data ${error}`);
        return [];
    }
}

//To save the Todo
function saveTodos() {
    try {
        fs.writeFileSync(filePath, JSON.stringify(todos));
    } catch (error) {
        console.log(`Error in Storing data ${error}`);
    }
}

app.listen(PORT, () => {
    console.log(`Server Running on Port ${PORT}`);
});
module.exports = app;
